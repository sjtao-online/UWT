@model UWT.Templates.Models.Templates.TagHelpers.TagHelperDataModel<UWT.Templates.Models.Interfaces.IToPageViewModel>
@using UWT.Templates.Attributes.Lists
@{ 
    var tModel = Model.TemplateModel;
}

@functions {
    private Microsoft.AspNetCore.Html.IHtmlContent RenderCell(Microsoft.AspNetCore.Html.IHtmlContent content, int i)
    {
        Microsoft.AspNetCore.Mvc.Rendering.TagBuilder builder = new TagBuilder("div");
        builder.AddCssClass("layui-table-cell uwt-table-cell-" + i);
        builder.InnerHtml.AppendHtml(content);
        return builder;
    }
}

<div class="layui-table-box">
    <div class="layui-table-header" style="display: flex;">
        <table cellspacing="0" cellpadding="0" border="0" class="layui-table uwt-table">
            <thead>
                <tr>
                    @for (int i = 0; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                    {
                        var item = Model.DataModel.ListViewModel.Columns[i];
                        if (item.IsIgnore)
                        {
                            continue;
                        }
                        <th class="@item.Class" style="@item.Styles">
                            @RenderCell(Html.Raw($"<span>{item.Title}</span>"), i)
                        </th>
                    }
                </tr>
            </thead>
        </table>
        <div id="uwt-query-scroll-block"></div>
    </div>
    @if (Model.DataModel.ItemTotal != 0)
    {
        int index = 1;
        int mindex = Model.DataModel.PageIndex * Model.DataModel.PageSize + 1;
        <div class="layui-table-body uwt-list-body">
            <table cellspacing="0" cellpadding="0" border="0" class="layui-table uwt-table" lay-even>
                <tbody>
                    @if (Model.DataModel.ListViewModel.HasMutilCheck)
                    {
                        foreach (var item in Model.DataModel.Items)
                        {
                            var c = Model.DataModel.ListViewModel.Columns[0];
                            <tr>
                                <td style="@c.Styles" class="@c.Class">
                                    @RenderCell(Html.Raw($"<input lay-filter='batch' class='batch-check-box' type='checkbox' lay-skin='primary' title='{ c.GetRawValue(item, ref tModel, Html)}' data-batch-key='{(Model.DataModel.ListViewModel.BatchProperty.GetValue(item))} />"), 0)
                                </td>
                                @for (int i = 1; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                                {
                                    var column = Model.DataModel.ListViewModel.Columns[i];
                                    if (column.IsIgnore)
                                    {
                                        continue;
                                    }
                                    if (column.ColumnType == ColumnType.Index)
                                    {
                                        <td style="@column.Styles" class="@column.Class">@RenderCell(Html.Raw(index.ToString()), i)</td>
                                        continue;
                                    }
                                    if (column.ColumnType == ColumnType.MIndex)
                                    {
                                        <td style="@column.Styles" class="@column.Class">@RenderCell(Html.Raw(mindex.ToString()), i)</td>
                                        continue;
                                    }
                                    <td style="@column.Styles" class="@column.Class">@RenderCell(column.GetRawValue(item, ref tModel, Html), i)</td>
                                }
                            </tr>
                            index++;
                            mindex++;
                        }
                    }
                    else
                    {
                        foreach (var item in Model.DataModel.Items)
                        {
                            <tr>
                                @for (int i = 0; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                                {
                                    var column = Model.DataModel.ListViewModel.Columns[i];
                                    if (column.IsIgnore)
                                    {
                                        continue;
                                    }
                                    if (column.ColumnType == ColumnType.Index)
                                    {
                                        <td style="@column.Styles" class="@column.Class">@RenderCell(Html.Raw(index.ToString()), i)</td>
                                        continue;
                                    }
                                    if (column.ColumnType == ColumnType.MIndex)
                                    {
                                        <td style="@column.Styles" class="@column.Class">@RenderCell(Html.Raw(mindex.ToString()), i)</td>
                                        continue;
                                    }
                                    <td style="@column.Styles" class="@column.Class">@RenderCell(column.GetRawValue(item, ref tModel, Html), i)</td>
                                }
                            </tr>
                            index++;
                            mindex++;
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>
