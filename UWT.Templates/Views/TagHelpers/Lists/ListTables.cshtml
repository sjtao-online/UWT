@model UWT.Templates.Models.Templates.TagHelpers.TagHelperDataModel<UWT.Templates.Models.Interfaces.IToPageViewModel>
@using UWT.Templates.Attributes.Lists
@{
    CurrentTModel = Model.TemplateModel;
}

@functions {
    UWT.Templates.Models.Templates.TagHelpers.TagHelperTemplateModel CurrentTModel = null;
    private Microsoft.AspNetCore.Html.IHtmlContent RenderCell(Microsoft.AspNetCore.Html.IHtmlContent content, string name, UWT.Templates.Models.Interfaces.ICellWidth width)
    {
        Microsoft.AspNetCore.Mvc.Rendering.TagBuilder builder = new TagBuilder("div");
        if (width == null)
        {
            builder.AddCssClass("layui-table-cell uwt-batch-checkbox");
        }
        else
        {
            builder.AddCssClass("layui-table-cell uwt-table-cell-" + name);
        }
        builder.InnerHtml.AppendHtml(content);
        return builder;
    }
    private Microsoft.AspNetCore.Html.IHtmlContent RenderCell(UWT.Templates.Models.Interfaces.IListColumnModel column, int i, int mi, object item)
    {
        if (column.IsIgnore)
        {
            return new StringHtmlContent("");
        }
        string name = column.Property.Name.ToLower();
        TagBuilder td = new TagBuilder("td");
        if (!string.IsNullOrEmpty(column.Class))
        {
            td.AddCssClass(column.Class);
        }
        if (!string.IsNullOrEmpty(column.Styles))
        {
            td.Attributes.Add("style", column.Styles);
        }
        if (column.ColumnType == ColumnType.Index)
        {
            td.InnerHtml.AppendHtml(RenderCell(Html.Raw(i.ToString()), name, column.Width));
        }
        else if (column.ColumnType == ColumnType.MIndex)
        {
            td.InnerHtml.AppendHtml(RenderCell(Html.Raw(mi.ToString()), name, column.Width));
        }
        else
        {
            td.InnerHtml.AppendHtml(RenderCell(column.GetRawValue(item, ref CurrentTModel, Html), name, column.Width));
        }
        return td;
    }
}

<div class="layui-table-box">
    <div class="layui-table-header" style="display: flex;">
        <table cellspacing="0" cellpadding="0" border="0" class="layui-table uwt-table">
            <thead>
                <tr>
                    @if (Model.DataModel.ListViewModel.HasMutilCheck)
                    {
                        <td>
                            @RenderCell(Html.Raw($"<input lay-filter='batch' class='batch-check-box' type='checkbox' lay-skin='primary' data-batch-key='' />"), null, null)
                        </td>
                    }
                    @for (int i = 0; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                    {
                        var item = Model.DataModel.ListViewModel.Columns[i];
                        if (item.IsIgnore)
                        {
                            continue;
                        }
                        string type = "*";
                        if (item.Width.IsAbsolute)
                        {
                            type = "px";
                        }
                        else if (item.Width.IsAuto)
                        {
                            type = "auto";
                        }
                        string maxwidth = "";
                        if (item.Width.MaxWidth != null)
                        {
                            maxwidth = "data-max-width='" + item.Width.MaxWidth.ToString() + "'";
                        }
                        <th class="@item.Class" style="@item.Styles" data-min-width="@item.Width.MinWidth" @maxwidth data-widthv="@item.Width.Value.ToString()" data-widtht="@type" data-cname="@item.Property.Name.ToLower()">
                            @RenderCell(Html.Raw($"<span>{item.Title}</span>"), item.Property.Name.ToLower(), item.Width)
                        </th>
                    }
                </tr>
            </thead>
        </table>
        <div id="uwt-query-scroll-block"></div>
    </div>
    @if (Model.DataModel.ItemTotal != 0)
    {
        int mindex = Model.DataModel.PageIndex * Model.DataModel.PageSize + 1;
        <div class="layui-table-body uwt-list-body">
            <table cellspacing="0" cellpadding="0" border="0" class="layui-table uwt-table" lay-even>
                <tbody>
                    @if (Model.DataModel.ListViewModel.HasMutilCheck)
                    {
                        foreach (var item in Model.DataModel.Items)
                        {
                            <tr>
                                <td>
                                    @RenderCell(Html.Raw($"<input lay-filter='batch' class='batch-check-box' type='checkbox' lay-skin='primary' data-batch-key='{(Model.DataModel.ListViewModel.BatchProperty.GetValue(item))}' />"), null, null)
                                </td>
                                @for (int i = 0; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                                {
                                    @RenderCell(Model.DataModel.ListViewModel.Columns[i], i + 1, mindex, item)
                                }
                            </tr>
                            mindex++;
                        }
                    }
                    else
                    {
                        foreach (var item in Model.DataModel.Items)
                        {
                            <tr>
                                @for (int i = 0; i < Model.DataModel.ListViewModel.Columns.Count; i++)
                                {
                                    @RenderCell(Model.DataModel.ListViewModel.Columns[i], i + 1, mindex, item)
                                }
                            </tr>
                            mindex++;
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    <style>
    </style>
</div>

