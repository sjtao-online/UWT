{
    "controller": {
        "scope": "csharp",
        "description": "控制器默认实现",
        "prefix": "uwtcontroller",
        "body": [
            "using System;",
            "using System.Collections.Generic;",
            "using System.Linq;",
            "using System.Threading.Tasks;",
            "using Microsoft.AspNetCore.Http;",
            "using Microsoft.AspNetCore.Mvc;",
            "using UWT.Templates.Models.Basics;",
            "using UWT.Templates.Models.Interfaces;",
            "using UWT.Templates.Services.Extends;",
            "",
            "namespace ${1:UWT}",
            "{",
            "\tpublic class ${TM_FILENAME_BASE} : Controller",
            "\t{",
            "\t\t$0",
            "\t}",
            "}"
        ]
    },
    "uwtlist": {
        "prefix": "uwtlist",
        "scope": "csharp",
        "body": [
            "public virtual IActionResult Index()",
            "{",
            "\treturn this.ListResult(m => new ${1:model}()",
            "\t{",
            "\t\t$0",
            "\t}).View();",
            "}"
        ]
    },
    "uwtadd": {
        "prefix": "uwtadd",
        "scope": "csharp",
        "body": [
            "public virtual IActionResult Add()",
            "{",
            "\treturn this.FormResult<${1:AddModel}>().View();",
            "}",
            "[HttpPost]",
            "public virtual async Task<object> AddModel([FromBody]$1 model)",
            "{",
            "\tList<FormValidModel> ret = new List<FormValidModel>();",
            "\tif (!await this.CheckCommitModel<$1>(model, ret))",
            "\t{",
            "\t\treturn this.Error(Templates.Models.Basics.ErrorCode.FormCheckError, ret);",
            "\t}",
            "\tthis.UsingDb(db =>",
            "\t{",
            "\t\tvar table = db.GetTable<${2:TDbTable}>();",
            "\t\ttable.Insert(() => new $2()",
            "\t\t{",
            "\t\t\t$0",
            "\t\t});",
            "\t});",
            "\treturn this.Success();",
            "}"
        ]
    },
    "uwtmodify": {
        "scope": "csharp",
        "prefix": "uwtmodify",
        "description": "修改代码段",
        "body": [
            "public virtual IActionResult Modify(int id)",
            "{",
            "\t${1:ModifyModel} current = null;",
            "\tthis.UsingDb(db =>",
            "\t{",
            "\t\tvar table = db.GetTable<${2:TDbTable}>();",
            "\t\tvar q = from it in table where !it.IsDeleted select new $1()",
            "\t\t{",
            "\t\t\t$0",
            "\t\t};",
            "\t\tif (q.Count() != 0)",
            "\t\t{",
            "\t\t\tcurrent = q.First();",
            "\t\t}",
            "\t});",
            "\tif (current == null)",
            "\t{",
            "\t\treturn this.ItemNotFound();",
            "\t}",
            "\treturn this.FormResult(current).View();",
            "}",
            "[HttpPost]",
            "public virtual async Task<object> ModifyModel([FromBody]$1 model)",
            "{",
            "\tList<FormValidModel> ret = new List<FormValidModel>();",
            "\tif (!await this.CheckCommitModel<$1>(model, ret))",
            "\t{",
            "\t\treturn this.Error(Templates.Models.Basics.ErrorCode.FormCheckError, ret);",
            "\t}",
            "\tthis.UsingDb(db =>",
            "\t{",
            "\t\tvar table = db.GetTable<${2:TDbTable}>();",
            "\t\ttable.Insert(() => new $2()",
            "\t\t{",
            "\t\t\t",
            "\t\t});",
            "\t});",
            "\treturn this.Success();",
            "}"
        ]
    },
    "uwtdel": {
        "scope": "csharp",
        "prefix": "uwtdel",
        "body": [
            "[HttpPost]",
            "public virtual object Del(int id)",
            "{",
            "\tthis.UsingDb(db =>",
            "\t{",
            "\t\tvar table = db.GetTable<${2:TDbTable}>();",
            "\t\ttable.Update(m => m.Id == id, m => new $2()",
            "\t\t{",
            "\t\t\tIsDeleted = true",
            "\t\t});",
            "\t});",
            "\treturn this.Success();",
            "}"
        ]
    }
}